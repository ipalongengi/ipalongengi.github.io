(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{"F5X/":function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",(function(){return d})),t.d(n,"default",(function(){return T}));var r=t("zLVn"),o=(t("q1tI"),t("7ljp")),a=t("alDk"),d={},x=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),Object(o.mdx)("div",n)}},c=x("SiteMetaData"),i=x("Divider"),m=x("SourceList"),l=x("SourceDays"),s=x("Box"),p=x("Flex"),u=x("Text"),b=x("SourceMonths"),j=x("Heading"),O=x("SourceTags"),f=x("SourceWords"),y=x("Donut"),g={_frontmatter:d},h=a.a;function T(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(o.mdx)(h,Object.assign({},g,t,{components:n,mdxType:"MDXLayout"}),Object(o.mdx)("h1",null,Object(o.mdx)("a",{parentName:"h1",href:"#-gatsby-theme-terminal"},"gatsby-theme-terminal")),Object(o.mdx)("p",null,"gatsby-theme-terminal has some of it's own components, and below is how you use them."),Object(o.mdx)("h2",null,Object(o.mdx)("a",{parentName:"h2",href:"#site-meta-data"},"SiteMetaData")),Object(o.mdx)("p",null,"The ",Object(o.mdx)("inlineCode",{parentName:"p"},"<SiteMetaData />")," component returns all fields specified by ",Object(o.mdx)("inlineCode",{parentName:"p"},"siteMetadata")," in ",Object(o.mdx)("inlineCode",{parentName:"p"},"gatsby-config.js")),Object(o.mdx)("pre",null,Object(o.mdx)("code",{parentName:"pre",className:"language-javascript"},"<SiteMetaData>\n  {siteMetadata => {\n    const { name, description } = siteMetadata\n    return (\n      <ul>\n        <li>{name}</li>\n        <li>{description}</li>\n      </ul>\n    )\n  }}\n</SiteMetaData>\n")),Object(o.mdx)(c,{mdxType:"SiteMetaData"},(function(e){var n=e.name,t=e.description;return Object(o.mdx)("ul",null,Object(o.mdx)("li",null,n),Object(o.mdx)("li",null,t))})),Object(o.mdx)(i,{mdxType:"Divider"}),Object(o.mdx)("h2",null,Object(o.mdx)("a",{parentName:"h2",href:"#source-list"},"SourceList")),Object(o.mdx)("p",null,"By default the source list returns all ",Object(o.mdx)("inlineCode",{parentName:"p"},".mdx")," found from the directories defined in ",Object(o.mdx)("inlineCode",{parentName:"p"},"gatsby-config.js"),". You can also use the ",Object(o.mdx)("inlineCode",{parentName:"p"},"filter")," prop with this component eg: ",Object(o.mdx)("inlineCode",{parentName:"p"},"<SourceList filter='posts' />")),Object(o.mdx)("p",null,Object(o.mdx)("em",{parentName:"p"},"NOTE:")," the ",Object(o.mdx)("inlineCode",{parentName:"p"},"filter")," source ",Object(o.mdx)("em",{parentName:"p"},"must")," be one from your ",Object(o.mdx)("inlineCode",{parentName:"p"},"gatsby-config.js")),Object(o.mdx)("pre",null,Object(o.mdx)("code",{parentName:"pre",className:"language-javascript"},"<SourceList>\n  {source => (\n    <ul>\n      {source.map((edge, index) => {\n        const {\n          frontmatter: { title },\n        } = edge.node\n        return <li key={index}>{title}</li>\n      })}\n    </ul>\n  )}\n</SourceList>\n")),Object(o.mdx)(m,{mdxType:"SourceList"},(function(e){return Object(o.mdx)("ul",null,e.map((function(e,n){var t=e.node.frontmatter.title;return Object(o.mdx)("li",{key:n},t)})))})),Object(o.mdx)(i,{mdxType:"Divider"}),Object(o.mdx)("h2",null,Object(o.mdx)("a",{parentName:"h2",href:"#source-days"},"SourceDays")),Object(o.mdx)("p",null,"By default source days returns an accumulated count and percent of all ",Object(o.mdx)("inlineCode",{parentName:"p"},"frontmatter")," date fields grouped by year. You can also use the ",Object(o.mdx)("inlineCode",{parentName:"p"},"filter")," prop with this component eg: ",Object(o.mdx)("inlineCode",{parentName:"p"},"<SourceDays filter='posts' />")),Object(o.mdx)("p",null,Object(o.mdx)("em",{parentName:"p"},"NOTE:")," the ",Object(o.mdx)("inlineCode",{parentName:"p"},"filter")," source ",Object(o.mdx)("em",{parentName:"p"},"must")," be one from your ",Object(o.mdx)("inlineCode",{parentName:"p"},"gatsby-config.js")),Object(o.mdx)("pre",null,Object(o.mdx)("code",{parentName:"pre",className:"language-javascript"},"<SourceDays>\n  {sourceDays => {\n    const currentYear = sourceDays[sourceDays.length - 1]\n    return (\n       <Box>\n        {currentYear.sort((a, b) => a.number - b.number).map((day, index) => {\n          const { name, count, percent } = day\n          return (\n            <Flex\n              key={index}\n              sx={{\n                backgroundColor: 'surface',\n                flexDirection: 'column',\n                mb: 2,\n                position: 'relative',\n              }}\n            >\n              <Box\n                sx={{\n                  backgroundColor: 'primary',\n                  height: '100%',\n                  position: 'absolute',\n                  width: `${percent}%`,\n                }}\n              />\n              <Box\n                sx={{\n                  position: 'relative',\n                  display: 'flex',\n                  justifyContent: 'space-between',\n                }}\n              >\n                <Text sx={{ textTransform: 'capitalize', pl: 2 }}>\n                  {name}\n                </Text>\n                <Text sx={{ pr: 2 }}>{`x${count}`}</Text>\n              </Box>\n            </Flex>\n          )\n        })}\n      </Box>\n    )\n  }}\n</SourceDays>\n")),Object(o.mdx)(l,{mdxType:"SourceDays"},(function(e){var n=e[e.length-1];return Object(o.mdx)(s,{mdxType:"Box"},n.sort((function(e,n){return e.number-n.number})).map((function(e,n){var t=e.name,r=e.count,a=e.percent;return Object(o.mdx)(p,{key:n,sx:{backgroundColor:"surface",flexDirection:"column",mb:2,position:"relative"},mdxType:"Flex"},Object(o.mdx)(s,{sx:{backgroundColor:"primary",height:"100%",position:"absolute",width:a+"%"},mdxType:"Box"}),Object(o.mdx)(s,{sx:{position:"relative",display:"flex",justifyContent:"space-between"},mdxType:"Box"},Object(o.mdx)(u,{sx:{textTransform:"capitalize",pl:2},mdxType:"Text"},t),Object(o.mdx)(u,{sx:{pr:2},mdxType:"Text"},"x"+r)))})))})),Object(o.mdx)(i,{mdxType:"Divider"}),Object(o.mdx)("h2",null,Object(o.mdx)("a",{parentName:"h2",href:"#source-months"},"SourceMonths")),Object(o.mdx)("p",null,"By default source months returns an accumulated count and percent of all ",Object(o.mdx)("inlineCode",{parentName:"p"},"frontmatter")," date fields grouped by year. You can also use the ",Object(o.mdx)("inlineCode",{parentName:"p"},"filter")," prop with this component eg: ",Object(o.mdx)("inlineCode",{parentName:"p"},"<SourceMonths filter='posts' />")),Object(o.mdx)("p",null,Object(o.mdx)("em",{parentName:"p"},"NOTE:")," the ",Object(o.mdx)("inlineCode",{parentName:"p"},"filter")," source ",Object(o.mdx)("em",{parentName:"p"},"must")," be one from your ",Object(o.mdx)("inlineCode",{parentName:"p"},"gatsby-config.js")),Object(o.mdx)("pre",null,Object(o.mdx)("code",{parentName:"pre",className:"language-javascript"},"<SourceMonths>\n  {sourceMonths => {\n    const currentYear = sourceMonths[sourceMonths.length - 1]\n    return (\n      <Box sx={{ backgroundColor: 'surface', p: 3 }}>\n        <Heading variant=\"styles.h4\">{currentYear[0].year}</Heading>\n        <Box sx={{ display: 'flex', flex: '1 1 auto', height: 300 }}>\n          <Flex sx={{ flexWrap: 'wrap', width: '100%' }}>\n            {currentYear.map((month, index) => {\n              const { initial, count, percent } = month\n              return (\n                <Box\n                  key={index}\n                  sx={{\n                    display: 'flex',\n                    flexDirection: 'column',\n                    justifyContent: 'flex-end',\n                    pl: 1,\n                    pr: 1,\n                    width: `${100 / currentYear.length}%`,\n                  }}\n                >\n                 <Text\n                    sx={{\n                      textAlign: 'center',\n                    }}\n                  >\n                    {`x${count}`}\n                  </Text>\n                  <Box\n                    sx={{\n                      backgroundColor: 'primary',\n                      height: `${percent}%`,\n                      p: 1,\n                    }}\n                  />\n                  <Text\n                    sx={{\n                      textTransform: 'uppercase',\n                      textAlign: 'center',\n                    }}\n                  >\n                    {initial}\n                  </Text>\n                </Box>\n              )\n            })}\n          </Flex>\n        </Box>\n      </Box>\n    )\n  }}\n</SourceMonths>\n")),Object(o.mdx)(b,{mdxType:"SourceMonths"},(function(e){var n=e[e.length-1];return Object(o.mdx)(s,{sx:{backgroundColor:"surface",p:3},mdxType:"Box"},Object(o.mdx)(j,{variant:"styles.h4",mdxType:"Heading"},n[0].year),Object(o.mdx)(s,{sx:{display:"flex",flex:"1 1 auto",height:300},mdxType:"Box"},Object(o.mdx)(p,{sx:{flexWrap:"wrap",width:"100%"},mdxType:"Flex"},n.map((function(e,t){var r=e.initial,a=e.count,d=e.percent;return Object(o.mdx)(s,{key:t,sx:{display:"flex",flexDirection:"column",justifyContent:"flex-end",pl:1,pr:1,width:100/n.length+"%"},mdxType:"Box"},Object(o.mdx)(u,{sx:{textAlign:"center"},mdxType:"Text"},"x"+a),Object(o.mdx)(s,{sx:{backgroundColor:"primary",height:d+"%",p:1},mdxType:"Box"}),Object(o.mdx)(u,{sx:{textTransform:"uppercase",textAlign:"center"},mdxType:"Text"},r))})))))})),Object(o.mdx)(i,{mdxType:"Divider"}),Object(o.mdx)("h2",null,Object(o.mdx)("a",{parentName:"h2",href:"#tag-list"},"SourceTags")),Object(o.mdx)("p",null,"By default source tags returns all tags found in the ",Object(o.mdx)("inlineCode",{parentName:"p"},".mdx")," sourced from the directories defined in `gatsby-config.js."),Object(o.mdx)("p",null,"You can also use the ",Object(o.mdx)("inlineCode",{parentName:"p"},"filter")," prop with this component eg: ",Object(o.mdx)("inlineCode",{parentName:"p"},"<SourceTags filter='posts' />")),Object(o.mdx)("p",null,Object(o.mdx)("em",{parentName:"p"},"NOTE:")," the ",Object(o.mdx)("inlineCode",{parentName:"p"},"filter")," source ",Object(o.mdx)("em",{parentName:"p"},"must")," be one from your `gatsby-config.js``"),Object(o.mdx)("pre",null,Object(o.mdx)("code",{parentName:"pre",className:"language-javascript"},"<SourceTags>\n  {source => (\n    <Flex\n    sx={{flexDirection: 'column'}}\n    >\n      {\n        source.map((tag, index) => {\n          const {name, count, percent} = tag\n          return (<Box  key={index}>\n            {`${name}  x${count}`}\n            <Box mb={2}  bg='muted' sx={{width: `${percent}%`, height: 4}} />\n          </Box>\n        })\n      }\n    </Flex>\n  )}\n</SourceTags>\n")),Object(o.mdx)(O,{mdxType:"SourceTags"},(function(e){return Object(o.mdx)(p,{sx:{flexDirection:"column"},mdxType:"Flex"},e.map((function(e,n){var t=e.name,r=e.count,a=e.percent;return Object(o.mdx)(s,{key:n,mdxType:"Box"},t+"  x"+r,Object(o.mdx)(s,{mb:2,bg:"muted",sx:{width:a+"%",height:4},mdxType:"Box"}))})))})),Object(o.mdx)(i,{mdxType:"Divider"}),Object(o.mdx)("h2",null,Object(o.mdx)("a",{parentName:"h2",href:"#embedded-images"},"embeddedImages")),Object(o.mdx)("p",null,"Using a frontmatter field called ",Object(o.mdx)("inlineCode",{parentName:"p"},"embeddedImages")," you can define a ",Object(o.mdx)("em",{parentName:"p"},"list")," of locally sourced images to embed in the ",Object(o.mdx)("inlineCode",{parentName:"p"},".mdx")," body. "),Object(o.mdx)("p",null,Object(o.mdx)("em",{parentName:"p"},"NOTE:")," this method won't work for ",Object(o.mdx)("inlineCode",{parentName:"p"},".mdx")," sourced from ",Object(o.mdx)("inlineCode",{parentName:"p"},"src/pages")),Object(o.mdx)("pre",null,Object(o.mdx)("code",{parentName:"pre",className:"language-javascript"},"---\ntitle: Post 1\nembeddedImages:\n  - markus-spiske-FXFz-sW0uwo-unsplash.jpg\n---\n")),Object(o.mdx)(i,{mdxType:"Divider"}),Object(o.mdx)("p",null,"You can then use the ",Object(o.mdx)("inlineCode",{parentName:"p"},"<EmbeddedImage />")," component like this in your ",Object(o.mdx)("inlineCode",{parentName:"p"},".mdx"),". "),Object(o.mdx)("p",null,"The ",Object(o.mdx)("inlineCode",{parentName:"p"},"image1")," object key refers to the position in the ",Object(o.mdx)("inlineCode",{parentName:"p"},"embeddedImages")," list in frontmatter"),Object(o.mdx)(i,{mdxType:"Divider"}),Object(o.mdx)("pre",null,Object(o.mdx)("code",{parentName:"pre",className:"language-javascript"},"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi\n\n<EmbeddedImage src={props.embedded.image1} />\n")),Object(o.mdx)(i,{mdxType:"Divider"}),Object(o.mdx)("h2",null,Object(o.mdx)("a",{parentName:"h2",href:"#source-words"},"SourceWords")),Object(o.mdx)("p",null,"By default source words returns a word count for all words found in the ",Object(o.mdx)("inlineCode",{parentName:"p"},".mdx")," sourced from the directories defined in `gatsby-config.js."),Object(o.mdx)("p",null,"You can also use the ",Object(o.mdx)("inlineCode",{parentName:"p"},"filter")," prop with this component eg: ",Object(o.mdx)("inlineCode",{parentName:"p"},"<SourceTags filter='posts' />")),Object(o.mdx)("p",null,Object(o.mdx)("em",{parentName:"p"},"NOTE:")," the ",Object(o.mdx)("inlineCode",{parentName:"p"},"filter")," source ",Object(o.mdx)("em",{parentName:"p"},"must")," be one from your `gatsby-config.js``"),Object(o.mdx)("pre",null,Object(o.mdx)("code",{parentName:"pre",className:"language-javascript"},"<SourceWords>\n    {source => {\n      const {\n        wordCountTotal,\n        wordCountAverage,\n        wordCountHighest,\n        wordCountLowest,\n        timeToReadTotal,\n        timeToReadAverage,\n      } = source\n      return (\n          <Box\n            sx={{\n              display: 'flex',\n              flex: '1 1 auto',\n              flexDirection: 'column',\n              mb: 3,\n              px: 2,\n              width: ['100%', '50%', '33.333333333%'],\n            }}\n          >\n            <Flex\n              sx={{\n                alignItems: 'center',\n                backgroundColor: 'surface',\n                flex: '1 1 auto',\n                flexDirection: 'column',\n                justifyContent: 'center',\n                p: 3,\n                position: 'relative',\n              }}\n            >\n              <Heading as=\"h4\" variant=\"styles.h4\">\n                Average word count\n              </Heading>\n              <Donut\n                sx={{ mx: 3, mb: 2 }}\n                value={wordCountAverage / wordCountTotal}\n              />\n              <Box sx={{ position: 'absolute' }}>\n                <Text\n                  sx={{\n                    textAlign: 'center',\n                    color: 'primary',\n                    fontSize: '22px',\n                    fontWeight: 'bold',\n                    lineHeight: '1',\n                  }}\n                >\n                  {wordCountAverage}\n                </Text>\n                <Text sx={{ textAlign: 'center', color: 'primary', lineHeight: '1' }}>\n                  Words\n                </Text>\n              </Box>\n              <Text\n                sx={{ textAlign: 'center' }}\n              >{`Total words: ${wordCountTotal}`}</Text>\n            </Flex>\n          </Box>\n        )\n      }}\n  </SourceWords>\n")),Object(o.mdx)(f,{mdxType:"SourceWords"},(function(e){var n=e.wordCountTotal,t=e.wordCountAverage,r=e.wordCountHighest,a=(e.wordCountLowest,e.timeToReadTotal),d=e.timeToReadAverage;return Object(o.mdx)(p,{sx:{flexWrap:"wrap",mx:function(e){return"-"+e.space[2]+"px"}},mdxType:"Flex"},Object(o.mdx)(s,{sx:{display:"flex",flex:"1 1 auto",flexDirection:"column",mb:3,px:2,width:["100%","50%","33.333333333%"]},mdxType:"Box"},Object(o.mdx)(p,{sx:{alignItems:"center",backgroundColor:"surface",flex:"1 1 auto",flexDirection:"column",justifyContent:"center",p:3,position:"relative"},mdxType:"Flex"},Object(o.mdx)(j,{as:"h4",variant:"styles.h4",mdxType:"Heading"},"Average word count"),Object(o.mdx)(y,{sx:{mx:3,mb:2},value:t/n,mdxType:"Donut"}),Object(o.mdx)(s,{sx:{position:"absolute"},mdxType:"Box"},Object(o.mdx)(u,{sx:{textAlign:"center",color:"primary",fontSize:"22px",fontWeight:"bold",lineHeight:"1"},mdxType:"Text"},t),Object(o.mdx)(u,{sx:{textAlign:"center",color:"primary",lineHeight:"1"},mdxType:"Text"},"Words")),Object(o.mdx)(u,{sx:{textAlign:"center"},mdxType:"Text"},"Total words: "+n))),Object(o.mdx)(s,{sx:{display:"flex",flex:"1 1 auto",flexDirection:"column",mb:3,px:2,width:["100%","50%","33.333333333%"]},mdxType:"Box"},Object(o.mdx)(p,{sx:{alignItems:"center",backgroundColor:"surface",flex:"1 1 auto",flexDirection:"column",justifyContent:"center",p:3,position:"relative"},mdxType:"Flex"},Object(o.mdx)(j,{as:"h4",variant:"styles.h4",mdxType:"Heading"},"Average time to read"),Object(o.mdx)(y,{variant:"styles.donut.secondary",sx:{mx:3,mb:2},value:d/a,mdxType:"Donut"}),Object(o.mdx)(s,{sx:{position:"absolute"},mdxType:"Box"},Object(o.mdx)(u,{sx:{textAlign:"center",color:"secondary",fontSize:"20px",fontWeight:"bold",lineHeight:"1"},mdxType:"Text"},d),Object(o.mdx)(u,{sx:{textAlign:"center",color:"secondary",lineHeight:"1"},mdxType:"Text"},"Minute")),Object(o.mdx)(u,{sx:{textAlign:"center"},mdxType:"Text"},"Total read time: "+a+" mins"))),Object(o.mdx)(s,{sx:{display:"flex",flex:"1 1 auto",flexDirection:"column",mb:3,px:2,width:["100%","50%","33.333333333%"]},mdxType:"Box"},Object(o.mdx)(p,{sx:{alignItems:"center",backgroundColor:"surface",flex:"1 1 auto",flexDirection:"column",justifyContent:"center",p:3,position:"relative"},mdxType:"Flex"},Object(o.mdx)(j,{as:"h4",variant:"styles.h4",mdxType:"Heading"},"Highest word count"),Object(o.mdx)(y,{variant:"styles.donut.success",sx:{mx:3,mb:2},value:r/n,mdxType:"Donut"}),Object(o.mdx)(s,{sx:{position:"absolute"},mdxType:"Box"},Object(o.mdx)(u,{sx:{textAlign:"center",color:"success",fontSize:"20px",fontWeight:"bold",lineHeight:"1"},mdxType:"Text"},r),Object(o.mdx)(u,{sx:{textAlign:"center",color:"success",lineHeight:"1"},mdxType:"Text"},"Words")),Object(o.mdx)(u,{sx:{textAlign:"center"},mdxType:"Text"},"Total words: "+n))))})),Object(o.mdx)(i,{mdxType:"Divider"}),Object(o.mdx)("pre",null,Object(o.mdx)("code",{parentName:"pre",className:"language-javascript"},"<SourceWords>\n  {sourceWords => {\n    const currentYear = sourceWords.wordCountByMonth[sourceWords.wordCountByMonth.length - 1]\n    return (\n      <Box sx={{ backgroundColor: 'surface', p: 3 }}>\n        <Flex>\n        <Heading variant=\"styles.h4\" sx={{mr: 2}}>{currentYear[0].year}</Heading>\n        <Text>Word count by month</Text>\n        </Flex>\n        <Box sx={{ display: 'flex', flex: '1 1 auto', height: 300 }}>\n          <Flex sx={{ flexWrap: 'wrap', width: '100%' }}>\n            {currentYear.map((month, index) => {\n              const { initial, words } = month\n              return (\n                <Box\n                  key={index}\n                  sx={{\n                    display: 'flex',\n                    flexDirection: 'column',\n                    justifyContent: 'flex-end',\n                    pl: 1,\n                    pr: 1,\n                    width: `${100 / currentYear.length}%`,\n                  }}\n                >\n                 <Text\n                    sx={{\n                      textAlign: 'center',\n                    }}\n                  >\n                    {`x${words}`}\n                  </Text>\n                  <Box\n                    sx={{\n                      backgroundColor: 'primary',\n                      height: `${words}%`,\n                      p: 1,\n                    }}\n                  />\n                  <Text\n                    sx={{\n                      textTransform: 'uppercase',\n                      textAlign: 'center',\n                    }}\n                  >\n                    {initial}\n                  </Text>\n                </Box>\n              )\n            })}\n          </Flex>\n        </Box>\n      </Box>\n    )\n  }}\n</SourceWords>\n")),Object(o.mdx)(f,{mdxType:"SourceWords"},(function(e){var n=e.wordCountByMonth[e.wordCountByMonth.length-1];return Object(o.mdx)(s,{sx:{backgroundColor:"surface",p:3},mdxType:"Box"},Object(o.mdx)(p,{mdxType:"Flex"},Object(o.mdx)(j,{variant:"styles.h4",sx:{mr:2},mdxType:"Heading"},n[0].year),Object(o.mdx)(u,{mdxType:"Text"},"Word count by month")),Object(o.mdx)(s,{sx:{display:"flex",flex:"1 1 auto",height:300},mdxType:"Box"},Object(o.mdx)(p,{sx:{flexWrap:"wrap",width:"100%"},mdxType:"Flex"},n.map((function(e,t){var r=e.initial,a=e.words;return Object(o.mdx)(s,{key:t,sx:{display:"flex",flexDirection:"column",justifyContent:"flex-end",pl:1,pr:1,width:100/n.length+"%"},mdxType:"Box"},Object(o.mdx)(u,{sx:{textAlign:"center"},mdxType:"Text"},"x"+a),Object(o.mdx)(s,{sx:{backgroundColor:"primary",height:a+"%",p:1},mdxType:"Box"}),Object(o.mdx)(u,{sx:{textTransform:"uppercase",textAlign:"center"},mdxType:"Text"},r))})))))})))}T.isMDXComponent=!0},alDk:function(e,n,t){"use strict";var r=t("q1tI"),o=t("2A+t"),a=t("YwZP"),d=t("ugCE"),x=t("WHxd"),c=t("ipYL"),i=t("ORj/");n.a=function(e){var n=e.children,t=Object(i.b)().site.siteMetadata,m=t.name,l=t.description,s=t.keywords,p=t.siteUrl,u=t.siteImage,b=t.lang;return Object(o.c)(d.b,null,Object(o.c)(c.a,null,Object(o.c)(a.Location,null,(function(e){var n=e.location.pathname,t=n.replace(/\//gm,"");return Object(o.c)(r.Fragment,null,Object(o.c)(x.a,{type:"website",title:m,titleTemplate:t,description:l,siteUrl:p,canonical:n,image:u,path:n,keywords:s||[""],lang:b}))})),n))}},zLVn:function(e,n,t){"use strict";function r(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}t.d(n,"a",(function(){return r}))}}]);
//# sourceMappingURL=component---src-pages-components-mdx-3c71abfb27a0e8ed7d09.js.map