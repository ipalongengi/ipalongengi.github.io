{"version":3,"sources":["webpack:///./src/pages/components.mdx","webpack:///./node_modules/@pauliescanlon/gatsby-theme-terminal/src/layouts/PageLayout.js","webpack:///./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"],"names":["_frontmatter","makeShortcode","name","props","console","warn","SiteMetaData","Divider","SourceList","SourceDays","Box","Flex","Text","SourceMonths","Heading","SourceTags","SourceWords","Donut","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","siteMetadata","description","source","map","edge","index","title","node","frontmatter","key","sourceDays","currentYear","length","sort","a","b","number","day","count","percent","sx","backgroundColor","flexDirection","mb","position","height","width","display","justifyContent","textTransform","pl","pr","sourceMonths","p","variant","year","flex","flexWrap","month","initial","textAlign","tag","bg","wordCountTotal","wordCountAverage","wordCountHighest","timeToReadTotal","wordCountLowest","timeToReadAverage","mx","theme","space","px","alignItems","as","value","color","fontSize","fontWeight","lineHeight","sourceWords","wordCountByMonth","mr","words","isMDXComponent","PageLayout","children","useConfig","site","keywords","siteUrl","siteImage","lang","pathname","location","titleTemplate","replace","type","canonical","image","path","_objectWithoutPropertiesLoose","excluded","i","target","sourceKeys","Object","keys","indexOf"],"mappings":"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","file":"component---src-pages-components-mdx-3c71abfb27a0e8ed7d09.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/ichwan/Documents/repos/personal-website/demo/node_modules/@pauliescanlon/gatsby-theme-terminal/src/layouts/PageLayout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst SiteMetaData = makeShortcode(\"SiteMetaData\");\nconst Divider = makeShortcode(\"Divider\");\nconst SourceList = makeShortcode(\"SourceList\");\nconst SourceDays = makeShortcode(\"SourceDays\");\nconst Box = makeShortcode(\"Box\");\nconst Flex = makeShortcode(\"Flex\");\nconst Text = makeShortcode(\"Text\");\nconst SourceMonths = makeShortcode(\"SourceMonths\");\nconst Heading = makeShortcode(\"Heading\");\nconst SourceTags = makeShortcode(\"SourceTags\");\nconst SourceWords = makeShortcode(\"SourceWords\");\nconst Donut = makeShortcode(\"Donut\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1><a parentName=\"h1\" {...{\n        \"href\": \"#-gatsby-theme-terminal\"\n      }}>{`gatsby-theme-terminal`}</a></h1>\n    <p>{`gatsby-theme-terminal has some of it's own components, and below is how you use them.`}</p>\n    <h2><a parentName=\"h2\" {...{\n        \"href\": \"#site-meta-data\"\n      }}>{`SiteMetaData`}</a></h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`<SiteMetaData />`}</inlineCode>{` component returns all fields specified by `}<inlineCode parentName=\"p\">{`siteMetadata`}</inlineCode>{` in `}<inlineCode parentName=\"p\">{`gatsby-config.js`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`<SiteMetaData>\n  {siteMetadata => {\n    const { name, description } = siteMetadata\n    return (\n      <ul>\n        <li>{name}</li>\n        <li>{description}</li>\n      </ul>\n    )\n  }}\n</SiteMetaData>\n`}</code></pre>\n    <SiteMetaData mdxType=\"SiteMetaData\">\n      {siteMetadata => {\n        const {\n          name,\n          description\n        } = siteMetadata;\n        return <ul>\n        <li>{name}</li>\n        <li>{description}</li>\n      </ul>;\n      }}\n    </SiteMetaData>\n    <Divider mdxType=\"Divider\" />\n    <h2><a parentName=\"h2\" {...{\n        \"href\": \"#source-list\"\n      }}>{`SourceList`}</a></h2>\n    <p>{`By default the source list returns all `}<inlineCode parentName=\"p\">{`.mdx`}</inlineCode>{` found from the directories defined in `}<inlineCode parentName=\"p\">{`gatsby-config.js`}</inlineCode>{`. You can also use the `}<inlineCode parentName=\"p\">{`filter`}</inlineCode>{` prop with this component eg: `}<inlineCode parentName=\"p\">{`<SourceList filter='posts' />`}</inlineCode></p>\n    <p><em parentName=\"p\">{`NOTE:`}</em>{` the `}<inlineCode parentName=\"p\">{`filter`}</inlineCode>{` source `}<em parentName=\"p\">{`must`}</em>{` be one from your `}<inlineCode parentName=\"p\">{`gatsby-config.js`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`<SourceList>\n  {source => (\n    <ul>\n      {source.map((edge, index) => {\n        const {\n          frontmatter: { title },\n        } = edge.node\n        return <li key={index}>{title}</li>\n      })}\n    </ul>\n  )}\n</SourceList>\n`}</code></pre>\n    <SourceList mdxType=\"SourceList\">\n  {source => <ul>\n      {source.map((edge, index) => {\n          const {\n            frontmatter: {\n              title\n            }\n          } = edge.node;\n          return <li key={index}>{title}</li>;\n        })}\n    </ul>}\n    </SourceList>\n    <Divider mdxType=\"Divider\" />\n    <h2><a parentName=\"h2\" {...{\n        \"href\": \"#source-days\"\n      }}>{`SourceDays`}</a></h2>\n    <p>{`By default source days returns an accumulated count and percent of all `}<inlineCode parentName=\"p\">{`frontmatter`}</inlineCode>{` date fields grouped by year. You can also use the `}<inlineCode parentName=\"p\">{`filter`}</inlineCode>{` prop with this component eg: `}<inlineCode parentName=\"p\">{`<SourceDays filter='posts' />`}</inlineCode></p>\n    <p><em parentName=\"p\">{`NOTE:`}</em>{` the `}<inlineCode parentName=\"p\">{`filter`}</inlineCode>{` source `}<em parentName=\"p\">{`must`}</em>{` be one from your `}<inlineCode parentName=\"p\">{`gatsby-config.js`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`<SourceDays>\n  {sourceDays => {\n    const currentYear = sourceDays[sourceDays.length - 1]\n    return (\n       <Box>\n        {currentYear.sort((a, b) => a.number - b.number).map((day, index) => {\n          const { name, count, percent } = day\n          return (\n            <Flex\n              key={index}\n              sx={{\n                backgroundColor: 'surface',\n                flexDirection: 'column',\n                mb: 2,\n                position: 'relative',\n              }}\n            >\n              <Box\n                sx={{\n                  backgroundColor: 'primary',\n                  height: '100%',\n                  position: 'absolute',\n                  width: \\`\\${percent}%\\`,\n                }}\n              />\n              <Box\n                sx={{\n                  position: 'relative',\n                  display: 'flex',\n                  justifyContent: 'space-between',\n                }}\n              >\n                <Text sx={{ textTransform: 'capitalize', pl: 2 }}>\n                  {name}\n                </Text>\n                <Text sx={{ pr: 2 }}>{\\`x\\${count}\\`}</Text>\n              </Box>\n            </Flex>\n          )\n        })}\n      </Box>\n    )\n  }}\n</SourceDays>\n`}</code></pre>\n    <SourceDays mdxType=\"SourceDays\">\n  {sourceDays => {\n        const currentYear = sourceDays[sourceDays.length - 1];\n        return <Box mdxType=\"Box\">\n        {currentYear.sort((a, b) => a.number - b.number).map((day, index) => {\n            const {\n              name,\n              count,\n              percent\n            } = day;\n            return <Flex key={index} sx={{\n              backgroundColor: 'surface',\n              flexDirection: 'column',\n              mb: 2,\n              position: 'relative'\n            }} mdxType=\"Flex\">\n              <Box sx={{\n                backgroundColor: 'primary',\n                height: '100%',\n                position: 'absolute',\n                width: `${percent}%`\n              }} mdxType=\"Box\" />\n              <Box sx={{\n                position: 'relative',\n                display: 'flex',\n                justifyContent: 'space-between'\n              }} mdxType=\"Box\">\n                <Text sx={{\n                  textTransform: 'capitalize',\n                  pl: 2\n                }} mdxType=\"Text\">\n                  {name}\n                </Text>\n                <Text sx={{\n                  pr: 2\n                }} mdxType=\"Text\">{`x${count}`}</Text>\n              </Box>\n            </Flex>;\n          })}\n      </Box>;\n      }}\n    </SourceDays>\n    <Divider mdxType=\"Divider\" />\n    <h2><a parentName=\"h2\" {...{\n        \"href\": \"#source-months\"\n      }}>{`SourceMonths`}</a></h2>\n    <p>{`By default source months returns an accumulated count and percent of all `}<inlineCode parentName=\"p\">{`frontmatter`}</inlineCode>{` date fields grouped by year. You can also use the `}<inlineCode parentName=\"p\">{`filter`}</inlineCode>{` prop with this component eg: `}<inlineCode parentName=\"p\">{`<SourceMonths filter='posts' />`}</inlineCode></p>\n    <p><em parentName=\"p\">{`NOTE:`}</em>{` the `}<inlineCode parentName=\"p\">{`filter`}</inlineCode>{` source `}<em parentName=\"p\">{`must`}</em>{` be one from your `}<inlineCode parentName=\"p\">{`gatsby-config.js`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`<SourceMonths>\n  {sourceMonths => {\n    const currentYear = sourceMonths[sourceMonths.length - 1]\n    return (\n      <Box sx={{ backgroundColor: 'surface', p: 3 }}>\n        <Heading variant=\"styles.h4\">{currentYear[0].year}</Heading>\n        <Box sx={{ display: 'flex', flex: '1 1 auto', height: 300 }}>\n          <Flex sx={{ flexWrap: 'wrap', width: '100%' }}>\n            {currentYear.map((month, index) => {\n              const { initial, count, percent } = month\n              return (\n                <Box\n                  key={index}\n                  sx={{\n                    display: 'flex',\n                    flexDirection: 'column',\n                    justifyContent: 'flex-end',\n                    pl: 1,\n                    pr: 1,\n                    width: \\`\\${100 / currentYear.length}%\\`,\n                  }}\n                >\n                 <Text\n                    sx={{\n                      textAlign: 'center',\n                    }}\n                  >\n                    {\\`x\\${count}\\`}\n                  </Text>\n                  <Box\n                    sx={{\n                      backgroundColor: 'primary',\n                      height: \\`\\${percent}%\\`,\n                      p: 1,\n                    }}\n                  />\n                  <Text\n                    sx={{\n                      textTransform: 'uppercase',\n                      textAlign: 'center',\n                    }}\n                  >\n                    {initial}\n                  </Text>\n                </Box>\n              )\n            })}\n          </Flex>\n        </Box>\n      </Box>\n    )\n  }}\n</SourceMonths>\n`}</code></pre>\n    <SourceMonths mdxType=\"SourceMonths\">\n  {sourceMonths => {\n        const currentYear = sourceMonths[sourceMonths.length - 1];\n        return <Box sx={{\n          backgroundColor: 'surface',\n          p: 3\n        }} mdxType=\"Box\">\n        <Heading variant=\"styles.h4\" mdxType=\"Heading\">{currentYear[0].year}</Heading>\n        <Box sx={{\n            display: 'flex',\n            flex: '1 1 auto',\n            height: 300\n          }} mdxType=\"Box\">\n          <Flex sx={{\n              flexWrap: 'wrap',\n              width: '100%'\n            }} mdxType=\"Flex\">\n            {currentYear.map((month, index) => {\n                const {\n                  initial,\n                  count,\n                  percent\n                } = month;\n                return <Box key={index} sx={{\n                  display: 'flex',\n                  flexDirection: 'column',\n                  justifyContent: 'flex-end',\n                  pl: 1,\n                  pr: 1,\n                  width: `${100 / currentYear.length}%`\n                }} mdxType=\"Box\">\n                 <Text sx={{\n                    textAlign: 'center'\n                  }} mdxType=\"Text\">\n                    {`x${count}`}\n                  </Text>\n                  <Box sx={{\n                    backgroundColor: 'primary',\n                    height: `${percent}%`,\n                    p: 1\n                  }} mdxType=\"Box\" />\n                  <Text sx={{\n                    textTransform: 'uppercase',\n                    textAlign: 'center'\n                  }} mdxType=\"Text\">\n                    {initial}\n                  </Text>\n                </Box>;\n              })}\n          </Flex>\n        </Box>\n      </Box>;\n      }}\n    </SourceMonths>\n    <Divider mdxType=\"Divider\" />\n    <h2><a parentName=\"h2\" {...{\n        \"href\": \"#tag-list\"\n      }}>{`SourceTags`}</a></h2>\n    <p>{`By default source tags returns all tags found in the `}<inlineCode parentName=\"p\">{`.mdx`}</inlineCode>{` sourced from the directories defined in \\`gatsby-config.js.`}</p>\n    <p>{`You can also use the `}<inlineCode parentName=\"p\">{`filter`}</inlineCode>{` prop with this component eg: `}<inlineCode parentName=\"p\">{`<SourceTags filter='posts' />`}</inlineCode></p>\n    <p><em parentName=\"p\">{`NOTE:`}</em>{` the `}<inlineCode parentName=\"p\">{`filter`}</inlineCode>{` source `}<em parentName=\"p\">{`must`}</em>{` be one from your \\`gatsby-config.js\\`\\``}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`<SourceTags>\n  {source => (\n    <Flex\n    sx={{flexDirection: 'column'}}\n    >\n      {\n        source.map((tag, index) => {\n          const {name, count, percent} = tag\n          return (<Box  key={index}>\n            {\\`\\${name}  x\\${count}\\`}\n            <Box mb={2}  bg='muted' sx={{width: \\`\\${percent}%\\`, height: 4}} />\n          </Box>\n        })\n      }\n    </Flex>\n  )}\n</SourceTags>\n`}</code></pre>\n    <SourceTags mdxType=\"SourceTags\">\n  {source => <Flex sx={{\n        flexDirection: 'column'\n      }} mdxType=\"Flex\">\n      {source.map((tag, index) => {\n          const {\n            name,\n            count,\n            percent\n          } = tag;\n          return <Box key={index} mdxType=\"Box\">\n            {`${name}  x${count}`}\n            <Box mb={2} bg='muted' sx={{\n              width: `${percent}%`,\n              height: 4\n            }} mdxType=\"Box\"></Box>\n          </Box>;\n        })}\n    </Flex>}\n    </SourceTags>\n    <Divider mdxType=\"Divider\" />\n    <h2><a parentName=\"h2\" {...{\n        \"href\": \"#embedded-images\"\n      }}>{`embeddedImages`}</a></h2>\n    <p>{`Using a frontmatter field called `}<inlineCode parentName=\"p\">{`embeddedImages`}</inlineCode>{` you can define a `}<em parentName=\"p\">{`list`}</em>{` of locally sourced images to embed in the `}<inlineCode parentName=\"p\">{`.mdx`}</inlineCode>{` body. `}</p>\n    <p><em parentName=\"p\">{`NOTE:`}</em>{` this method won't work for `}<inlineCode parentName=\"p\">{`.mdx`}</inlineCode>{` sourced from `}<inlineCode parentName=\"p\">{`src/pages`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`---\ntitle: Post 1\nembeddedImages:\n  - markus-spiske-FXFz-sW0uwo-unsplash.jpg\n---\n`}</code></pre>\n    <Divider mdxType=\"Divider\" />\n    <p>{`You can then use the `}<inlineCode parentName=\"p\">{`<EmbeddedImage />`}</inlineCode>{` component like this in your `}<inlineCode parentName=\"p\">{`.mdx`}</inlineCode>{`. `}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`image1`}</inlineCode>{` object key refers to the position in the `}<inlineCode parentName=\"p\">{`embeddedImages`}</inlineCode>{` list in frontmatter`}</p>\n    <Divider mdxType=\"Divider\" />\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi\n\n<EmbeddedImage src={props.embedded.image1} />\n`}</code></pre>\n    <Divider mdxType=\"Divider\" />\n    <h2><a parentName=\"h2\" {...{\n        \"href\": \"#source-words\"\n      }}>{`SourceWords`}</a></h2>\n    <p>{`By default source words returns a word count for all words found in the `}<inlineCode parentName=\"p\">{`.mdx`}</inlineCode>{` sourced from the directories defined in \\`gatsby-config.js.`}</p>\n    <p>{`You can also use the `}<inlineCode parentName=\"p\">{`filter`}</inlineCode>{` prop with this component eg: `}<inlineCode parentName=\"p\">{`<SourceTags filter='posts' />`}</inlineCode></p>\n    <p><em parentName=\"p\">{`NOTE:`}</em>{` the `}<inlineCode parentName=\"p\">{`filter`}</inlineCode>{` source `}<em parentName=\"p\">{`must`}</em>{` be one from your \\`gatsby-config.js\\`\\``}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`<SourceWords>\n    {source => {\n      const {\n        wordCountTotal,\n        wordCountAverage,\n        wordCountHighest,\n        wordCountLowest,\n        timeToReadTotal,\n        timeToReadAverage,\n      } = source\n      return (\n          <Box\n            sx={{\n              display: 'flex',\n              flex: '1 1 auto',\n              flexDirection: 'column',\n              mb: 3,\n              px: 2,\n              width: ['100%', '50%', '33.333333333%'],\n            }}\n          >\n            <Flex\n              sx={{\n                alignItems: 'center',\n                backgroundColor: 'surface',\n                flex: '1 1 auto',\n                flexDirection: 'column',\n                justifyContent: 'center',\n                p: 3,\n                position: 'relative',\n              }}\n            >\n              <Heading as=\"h4\" variant=\"styles.h4\">\n                Average word count\n              </Heading>\n              <Donut\n                sx={{ mx: 3, mb: 2 }}\n                value={wordCountAverage / wordCountTotal}\n              />\n              <Box sx={{ position: 'absolute' }}>\n                <Text\n                  sx={{\n                    textAlign: 'center',\n                    color: 'primary',\n                    fontSize: '22px',\n                    fontWeight: 'bold',\n                    lineHeight: '1',\n                  }}\n                >\n                  {wordCountAverage}\n                </Text>\n                <Text sx={{ textAlign: 'center', color: 'primary', lineHeight: '1' }}>\n                  Words\n                </Text>\n              </Box>\n              <Text\n                sx={{ textAlign: 'center' }}\n              >{\\`Total words: \\${wordCountTotal}\\`}</Text>\n            </Flex>\n          </Box>\n        )\n      }}\n  </SourceWords>\n`}</code></pre>\n    <SourceWords mdxType=\"SourceWords\">\n    {source => {\n        const {\n          wordCountTotal,\n          wordCountAverage,\n          wordCountHighest,\n          wordCountLowest,\n          timeToReadTotal,\n          timeToReadAverage\n        } = source;\n        return <Flex sx={{\n          flexWrap: 'wrap',\n          mx: theme => `-${theme.space[2]}px`\n        }} mdxType=\"Flex\">\n          <Box sx={{\n            display: 'flex',\n            flex: '1 1 auto',\n            flexDirection: 'column',\n            mb: 3,\n            px: 2,\n            width: ['100%', '50%', '33.333333333%']\n          }} mdxType=\"Box\">\n            <Flex sx={{\n              alignItems: 'center',\n              backgroundColor: 'surface',\n              flex: '1 1 auto',\n              flexDirection: 'column',\n              justifyContent: 'center',\n              p: 3,\n              position: 'relative'\n            }} mdxType=\"Flex\">\n              <Heading as=\"h4\" variant=\"styles.h4\" mdxType=\"Heading\">\n                Average word count\n              </Heading>\n              <Donut sx={{\n                mx: 3,\n                mb: 2\n              }} value={wordCountAverage / wordCountTotal} mdxType=\"Donut\" />\n              <Box sx={{\n                position: 'absolute'\n              }} mdxType=\"Box\">\n                <Text sx={{\n                  textAlign: 'center',\n                  color: 'primary',\n                  fontSize: '22px',\n                  fontWeight: 'bold',\n                  lineHeight: '1'\n                }} mdxType=\"Text\">\n                  {wordCountAverage}\n                </Text>\n                <Text sx={{\n                  textAlign: 'center',\n                  color: 'primary',\n                  lineHeight: '1'\n                }} mdxType=\"Text\">\n                  Words\n                </Text>\n              </Box>\n              <Text sx={{\n                textAlign: 'center'\n              }} mdxType=\"Text\">{`Total words: ${wordCountTotal}`}</Text>\n            </Flex>\n          </Box>\n          <Box sx={{\n            display: 'flex',\n            flex: '1 1 auto',\n            flexDirection: 'column',\n            mb: 3,\n            px: 2,\n            width: ['100%', '50%', '33.333333333%']\n          }} mdxType=\"Box\">\n            <Flex sx={{\n              alignItems: 'center',\n              backgroundColor: 'surface',\n              flex: '1 1 auto',\n              flexDirection: 'column',\n              justifyContent: 'center',\n              p: 3,\n              position: 'relative'\n            }} mdxType=\"Flex\">\n              <Heading as=\"h4\" variant=\"styles.h4\" mdxType=\"Heading\">\n                Average time to read\n              </Heading>\n              <Donut variant=\"styles.donut.secondary\" sx={{\n                mx: 3,\n                mb: 2\n              }} value={timeToReadAverage / timeToReadTotal} mdxType=\"Donut\" />\n              <Box sx={{\n                position: 'absolute'\n              }} mdxType=\"Box\">\n                <Text sx={{\n                  textAlign: 'center',\n                  color: 'secondary',\n                  fontSize: '20px',\n                  fontWeight: 'bold',\n                  lineHeight: '1'\n                }} mdxType=\"Text\">\n                  {timeToReadAverage}\n                </Text>\n                <Text sx={{\n                  textAlign: 'center',\n                  color: 'secondary',\n                  lineHeight: '1'\n                }} mdxType=\"Text\">\n                  Minute\n                </Text>\n              </Box>\n              <Text sx={{\n                textAlign: 'center'\n              }} mdxType=\"Text\">{`Total read time: ${timeToReadTotal} mins`}</Text>\n            </Flex>\n          </Box>\n          <Box sx={{\n            display: 'flex',\n            flex: '1 1 auto',\n            flexDirection: 'column',\n            mb: 3,\n            px: 2,\n            width: ['100%', '50%', '33.333333333%']\n          }} mdxType=\"Box\">\n            <Flex sx={{\n              alignItems: 'center',\n              backgroundColor: 'surface',\n              flex: '1 1 auto',\n              flexDirection: 'column',\n              justifyContent: 'center',\n              p: 3,\n              position: 'relative'\n            }} mdxType=\"Flex\">\n              <Heading as=\"h4\" variant=\"styles.h4\" mdxType=\"Heading\">\n                Highest word count\n              </Heading>\n              <Donut variant=\"styles.donut.success\" sx={{\n                mx: 3,\n                mb: 2\n              }} value={wordCountHighest / wordCountTotal} mdxType=\"Donut\" />\n              <Box sx={{\n                position: 'absolute'\n              }} mdxType=\"Box\">\n                <Text sx={{\n                  textAlign: 'center',\n                  color: 'success',\n                  fontSize: '20px',\n                  fontWeight: 'bold',\n                  lineHeight: '1'\n                }} mdxType=\"Text\">\n                  {wordCountHighest}\n                </Text>\n                <Text sx={{\n                  textAlign: 'center',\n                  color: 'success',\n                  lineHeight: '1'\n                }} mdxType=\"Text\">\n                  Words\n                </Text>\n              </Box>\n              <Text sx={{\n                textAlign: 'center'\n              }} mdxType=\"Text\">{`Total words: ${wordCountTotal}`}</Text>\n            </Flex>\n          </Box>\n        </Flex>;\n      }}\n  </SourceWords>\n    <Divider mdxType=\"Divider\" />\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`<SourceWords>\n  {sourceWords => {\n    const currentYear = sourceWords.wordCountByMonth[sourceWords.wordCountByMonth.length - 1]\n    return (\n      <Box sx={{ backgroundColor: 'surface', p: 3 }}>\n        <Flex>\n        <Heading variant=\"styles.h4\" sx={{mr: 2}}>{currentYear[0].year}</Heading>\n        <Text>Word count by month</Text>\n        </Flex>\n        <Box sx={{ display: 'flex', flex: '1 1 auto', height: 300 }}>\n          <Flex sx={{ flexWrap: 'wrap', width: '100%' }}>\n            {currentYear.map((month, index) => {\n              const { initial, words } = month\n              return (\n                <Box\n                  key={index}\n                  sx={{\n                    display: 'flex',\n                    flexDirection: 'column',\n                    justifyContent: 'flex-end',\n                    pl: 1,\n                    pr: 1,\n                    width: \\`\\${100 / currentYear.length}%\\`,\n                  }}\n                >\n                 <Text\n                    sx={{\n                      textAlign: 'center',\n                    }}\n                  >\n                    {\\`x\\${words}\\`}\n                  </Text>\n                  <Box\n                    sx={{\n                      backgroundColor: 'primary',\n                      height: \\`\\${words}%\\`,\n                      p: 1,\n                    }}\n                  />\n                  <Text\n                    sx={{\n                      textTransform: 'uppercase',\n                      textAlign: 'center',\n                    }}\n                  >\n                    {initial}\n                  </Text>\n                </Box>\n              )\n            })}\n          </Flex>\n        </Box>\n      </Box>\n    )\n  }}\n</SourceWords>\n`}</code></pre>\n    <SourceWords mdxType=\"SourceWords\">\n  {sourceWords => {\n        const currentYear = sourceWords.wordCountByMonth[sourceWords.wordCountByMonth.length - 1];\n        return <Box sx={{\n          backgroundColor: 'surface',\n          p: 3\n        }} mdxType=\"Box\">\n        <Flex mdxType=\"Flex\">\n        <Heading variant=\"styles.h4\" sx={{\n              mr: 2\n            }} mdxType=\"Heading\">{currentYear[0].year}</Heading>\n        <Text mdxType=\"Text\">Word count by month</Text>\n        </Flex>\n        <Box sx={{\n            display: 'flex',\n            flex: '1 1 auto',\n            height: 300\n          }} mdxType=\"Box\">\n          <Flex sx={{\n              flexWrap: 'wrap',\n              width: '100%'\n            }} mdxType=\"Flex\">\n            {currentYear.map((month, index) => {\n                const {\n                  initial,\n                  words\n                } = month;\n                return <Box key={index} sx={{\n                  display: 'flex',\n                  flexDirection: 'column',\n                  justifyContent: 'flex-end',\n                  pl: 1,\n                  pr: 1,\n                  width: `${100 / currentYear.length}%`\n                }} mdxType=\"Box\">\n                 <Text sx={{\n                    textAlign: 'center'\n                  }} mdxType=\"Text\">\n                    {`x${words}`}\n                  </Text>\n                  <Box sx={{\n                    backgroundColor: 'primary',\n                    height: `${words}%`,\n                    p: 1\n                  }} mdxType=\"Box\" />\n                  <Text sx={{\n                    textTransform: 'uppercase',\n                    textAlign: 'center'\n                  }} mdxType=\"Text\">\n                    {initial}\n                  </Text>\n                </Box>;\n              })}\n          </Flex>\n        </Box>\n      </Box>;\n      }}\n    </SourceWords>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","/** @jsx jsx */\nimport { Fragment } from 'react'\nimport { jsx } from 'theme-ui'\nimport { Location } from '@reach/router'\nimport { ContextProvider } from '../context'\n\nimport { Seo } from '../components/Seo'\nimport { Main } from '../components/Main'\n\nimport { useConfig } from '../data'\n\nconst PageLayout = ({ children }) => {\n  const {\n    site: {\n      siteMetadata: { name, description, keywords, siteUrl, siteImage, lang },\n    },\n  } = useConfig()\n\n  return (\n    <ContextProvider>\n      <Main>\n        <Location>\n          {({ location }) => {\n            const { pathname } = location\n            const titleTemplate = pathname.replace(/\\//gm, '')\n\n            return (\n              <Fragment>\n                <Seo\n                  type=\"website\"\n                  title={name}\n                  titleTemplate={titleTemplate}\n                  description={description}\n                  siteUrl={siteUrl}\n                  canonical={pathname}\n                  image={siteImage}\n                  path={pathname}\n                  keywords={keywords || ['']}\n                  lang={lang}\n                />\n              </Fragment>\n            )\n          }}\n        </Location>\n        {children}\n      </Main>\n    </ContextProvider>\n  )\n}\n\nexport default PageLayout\n","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}"],"sourceRoot":""}